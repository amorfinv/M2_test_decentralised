#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 12 11:14:29 2021

@author: andreibadea
"""

# Based on:
# https://github.com/DEAP/deap/blob/master/examples/ga/onemax.py

# Derek M Tishler
# Jul 2020

import array
import random
import sys

import numpy as np

import osmnx as ox
import networkx as nx
from os import path
from funcs import coins, graph_funcs
from evaluate_directionality import dijkstra_search_multiple
from whole_vienna.graph_builder import GraphBuilder
import random
import os
import copy

class Node:
    def __init__(self,key,x,y):
        self.key=key
        self.x=x
        self.y=y
        self.children={}# each element of neigh is like [ox_key,edge_cost] 

GB = GraphBuilder()

# %% LonLats
coords = np.array([[16.35814017,48.20567324],
                    [16.36131835,48.21168927],
                    [16.387966,48.19710948],
                    [16.38808281,48.20143283],
                    [16.38819965,48.20575617],
                    [16.38831651,48.21007951],
                    [16.39396344,48.17973784],
                    [16.39408069,48.18406119],
                    [16.39419796,48.18838453],
                    [16.39431526,48.19270787],
                    [16.39443259,48.19703121],
                    [16.39454994,48.20135455],
                    [16.36137183,48.21370652],
                    [16.39466732,48.20567788],
                    [16.39478473,48.21000121],
                    [16.40054562,48.18398259],
                    [16.40066343,48.18830592],
                    [16.40078127,48.19262925],
                    [16.40089914,48.19695258],
                    [16.40101704,48.20127591],
                    [16.40712887,48.18822695],
                    [16.40724726,48.19255027],
                    [16.40736567,48.19687359],
                    [16.36406857,48.20156728],
                    [16.41371322,48.19247092],
                    [16.36332275,48.19461486],
                    [16.36339384,48.19729377],
                    [16.36711568,48.18653055],
                    [16.36718694,48.18920946],
                    [16.36725821,48.19188836],
                    [16.3673295,48.19456727],
                    [16.36412214,48.20358453],
                    [16.36740079,48.19724617],
                    [16.3674721,48.19992508],
                    [16.37112179,48.18648283],
                    [16.37119326,48.18916173],
                    [16.37126474,48.19184063],
                    [16.37133623,48.19451953],
                    [16.37140774,48.19719843],
                    [16.37147925,48.19987733],
                    [16.37512789,48.18643497],
                    [16.37519957,48.18911387],
                    [16.36417572,48.20560177],
                    [16.37527126,48.19179276],
                    [16.37534296,48.19447166],
                    [16.37541467,48.19715056],
                    [16.37920587,48.18906586],
                    [16.34615635,48.18527532],
                    [16.34623509,48.18828133],
                    [16.35057252,48.18221658],
                    [16.3506515,48.18522259],
                    [16.3507305,48.18822859],
                    [16.35506739,48.18216368],
                    [16.3642293,48.20761901],
                    [16.35514664,48.18516967],
                    [16.3552259,48.18817567],
                    [16.35530517,48.19118166],
                    [16.35538446,48.19418765],
                    [16.35956225,48.1821106],
                    [16.35964176,48.18511659],
                    [16.35972128,48.18812258],
                    [16.35980082,48.19112856],
                    [16.35988037,48.19413455],
                    [16.36413687,48.18506333],
                    [16.36428289,48.20963625],
                    [16.36421665,48.18806931],
                    [16.34104136,48.19077491],
                    [16.3411063,48.19326326],
                    [16.34117125,48.19575162],
                    [16.34476282,48.19073143],
                    [16.34482794,48.19321978],
                    [16.34489307,48.19570813],
                    [16.34848427,48.19068783],
                    [16.34854957,48.19317618],
                    [16.34861488,48.19566452],
                    [16.36433648,48.21165349],
                    [16.35220571,48.19064411],
                    [16.35227119,48.19313245],
                    [16.35233668,48.19562079],
                    [16.35240218,48.19810914],
                    [16.35612416,48.19806528],
                    [16.35984612,48.19802131],
                    [16.35991199,48.20050964],
                    [16.36363413,48.20046555],
                    [16.34052306,48.1984137],
                    [16.3405896,48.20096353],
                    [16.36439008,48.21367073],
                    [16.34065615,48.20351337],
                    [16.3407227,48.2060632],
                    [16.34433704,48.19836916],
                    [16.34440377,48.20091899],
                    [16.3444705,48.20346882],
                    [16.34453725,48.20601864],
                    [16.34815101,48.19832449],
                    [16.34821792,48.20087431],
                    [16.34828485,48.20342414],
                    [16.34835178,48.20597396],
                    [16.3670861,48.20153143],
                    [16.35203207,48.20082951],
                    [16.35209919,48.20337933],
                    [16.35216631,48.20592915],
                    [16.35584621,48.20078459],
                    [16.35591351,48.2033344],
                    [16.35598083,48.20588422],
                    [16.35972783,48.20328934],
                    [16.34185814,48.20870669],
                    [16.34191764,48.2109835],
                    [16.34197714,48.21326031],
                    [16.35819351,48.20769049],
                    [16.36713979,48.20354867],
                    [16.34526443,48.20866687],
                    [16.34532408,48.21094368],
                    [16.34538373,48.21322049],
                    [16.34867071,48.20862696],
                    [16.34873051,48.21090376],
                    [16.34879031,48.21318057],
                    [16.35207699,48.20858694],
                    [16.35213693,48.21086374],
                    [16.35219689,48.21314055],
                    [16.35554335,48.21082362],
                    [16.36719349,48.20556591],
                    [16.35560345,48.21310042],
                    [16.34566468,48.21714796],
                    [16.34574756,48.22030973],
                    [16.35039571,48.21709248],
                    [16.35047888,48.22025424],
                    [16.35056207,48.223416],
                    [16.35064526,48.22657776],
                    [16.35072848,48.22973952],
                    [16.35512673,48.21703681],
                    [16.35521019,48.22019856],
                    [16.36724719,48.20758315],
                    [16.35529367,48.22336031],
                    [16.35537716,48.22652207],
                    [16.35546066,48.22968382],
                    [16.35985774,48.21698094],
                    [16.35994149,48.22014269],
                    [16.36002526,48.22330443],
                    [16.36010904,48.22646618],
                    [16.36019283,48.22962792],
                    [16.36027664,48.23278966],
                    [16.36036046,48.2359514],
                    [16.36730089,48.20960039],
                    [16.36458873,48.21692487],
                    [16.36467277,48.22008662],
                    [16.36475683,48.22324836],
                    [16.3648409,48.2264101],
                    [16.3673546,48.21161763],
                    [16.3512388,48.17567712],
                    [16.36055179,48.16922408],
                    [16.36071957,48.17556526],
                    [16.37003133,48.16911147],
                    [16.37020029,48.17545263],
                    [16.36740832,48.21363487],
                    [16.3703693,48.18179378],
                    [16.37934075,48.16265693],
                    [16.37951082,48.16899807],
                    [16.37968094,48.17533921],
                    [16.37985112,48.18168034],
                    [16.36746204,48.2156521],
                    [16.3889876,48.16878597],
                    [16.38915757,48.17507811],
                    [16.37010363,48.2014955],
                    [16.37015744,48.20351274],
                    [16.37021125,48.20552998],
                    [16.35824686,48.20970773],
                    [16.37026507,48.20754722],
                    [16.32177059,48.17521379],
                    [16.32189724,48.18013986],
                    [16.37031889,48.20956445],
                    [16.32202393,48.18506594],
                    [16.32913554,48.17512885],
                    [16.32926289,48.18005491],
                    [16.33662851,48.17996949],
                    [16.3367566,48.18489554],
                    [16.37037272,48.21158169],
                    [16.34399409,48.1798836],
                    [16.34412289,48.18480963],
                    [16.37042655,48.21359892],
                    [16.3704804,48.21561616],
                    [16.37053424,48.21763339],
                    [16.30770853,48.19359064],
                    [16.3078698,48.19992637],
                    [16.31720288,48.18845341],
                    [16.31732068,48.19304926],
                    [16.31743852,48.1976451],
                    [16.31755638,48.20224094],
                    [16.37312115,48.2014595],
                    [16.32407589,48.18837444],
                    [16.32419431,48.19297027],
                    [16.32431276,48.19756611],
                    [16.32443123,48.20216193],
                    [16.33094886,48.18829506],
                    [16.3310679,48.19289088],
                    [16.33118696,48.1974867],
                    [16.33130606,48.20208251],
                    [16.33782181,48.18821527],
                    [16.33794146,48.19281108],
                    [16.37317507,48.20347673],
                    [16.33806114,48.19740688],
                    [16.373229,48.20549397],
                    [16.30937335,48.20912593],
                    [16.30953252,48.2153676],
                    [16.30969174,48.22160926],
                    [16.31871144,48.20901918],
                    [16.31887174,48.21526083],
                    [16.32804947,48.20891168],
                    [16.33738744,48.20880341],
                    [16.37328294,48.2075112],
                    [16.35830022,48.21172498],
                    [16.37333688,48.20952844],
                    [16.31585504,48.22507781],
                    [16.31601733,48.23140727],
                    [16.32516403,48.21863955],
                    [16.32532743,48.22496899],
                    [16.3346352,48.21852998],
                    [16.37339083,48.21154567],
                    [16.31903335,48.23568008],
                    [16.3279394,48.2295213],
                    [16.33684331,48.22336183],
                    [16.33700102,48.22941626],
                    [16.3455912,48.22305441],
                    [16.34574456,48.22890353],
                    [16.37344478,48.2135629],
                    [16.37349874,48.21558013],
                    [16.37613866,48.20142341],
                    [16.35098402,48.23823195],
                    [16.35114964,48.24452037],
                    [16.3761927,48.20344064],
                    [16.36039742,48.23812095],
                    [16.36056419,48.24440933],
                    [16.36906345,48.2304612],
                    [16.37624675,48.20545788],
                    [16.36920679,48.23583301],
                    [16.36935016,48.24120482],
                    [16.36949358,48.24657663],
                    [16.37710353,48.23036517],
                    [16.37724771,48.23573696],
                    [16.37739193,48.24110875],
                    [16.37753618,48.24648054],
                    [16.37768049,48.25185232],
                    [16.38514357,48.23026857],
                    [16.37630081,48.20747511],
                    [16.38528859,48.23564035],
                    [16.38543364,48.24101212],
                    [16.39332942,48.23554317],
                    [16.37635487,48.20949234],
                    [16.37640893,48.21150957],
                    [16.35835358,48.21374222],
                    [16.37921033,48.20340448],
                    [16.3792645,48.20542171],
                    [16.37931867,48.20743893],
                    [16.37937285,48.20945616],
                    [16.37942703,48.21147339],
                    [16.38233652,48.20740268],
                    [16.38239082,48.20941991],
                    [16.38244513,48.21143713],
                    [16.37670052,48.21711392],
                    [16.37686991,48.2234299],
                    [16.36110449,48.2036203],
                    [16.38615127,48.21700034],
                    [16.38632182,48.2233163],
                    [16.3954303,48.21057005],
                    [16.39560196,48.21688599],
                    [16.39577367,48.22320193],
                    [16.39594545,48.22951785],
                    [16.40470701,48.20413903],
                    [16.40487977,48.21045495],
                    [16.40505258,48.21677087],
                    [16.40522546,48.22308677],
                    [16.36115795,48.20563754],
                    [16.4053984,48.22940267],
                    [16.4139814,48.19770727],
                    [16.41415526,48.20402318],
                    [16.41432918,48.21033907],
                    [16.41450315,48.21665496],
                    [16.42360344,48.20390655],
                    [16.42377852,48.21022242],
                    [16.36121141,48.20765479],
                    [16.36126488,48.20967203],
                    [16.38126693,48.18854066],
                    [16.38138315,48.19286402],
                    [16.38149939,48.19718739],
                    [16.38161565,48.20151075],
                    [16.38761573,48.18413942],
                    [16.38773246,48.18846278],
                    [16.38784922,48.19278613]])

# %%
nodes = ox.nearest_nodes(GB.G_0, coords[:,0], coords[:,1])

orig_nodes_numbers = copy.copy(nodes)

dest_nodes_numbers = copy.copy(nodes)

connected = []

graph = {}

def evalOneMax(individual):
    # Make a copy
    dest_nodes = copy.copy(dest_nodes_numbers)
            
    # reoroder edge geodatframe
    G = GB.build_graph(individual)
    
    global connected
    connected = nx.strongly_connected_components(G)
    
    # Process nodes to put em in the right form
    omsnx_keys_list=list(G._node.keys())
    
    ###Initialise the graph for the search
    global graph
    graph = {}
    for i in range(len(omsnx_keys_list)):
        key=omsnx_keys_list[i]
        x=G._node[key]['x']
        y=G._node[key]['y']
        node=Node(key,x,y)
        children=list(G._succ[key].keys())
        for ch in children:
            cost=G[key][ch][0]['length']
            node.children[ch]=cost
        
        graph[key]=node
    orig_nodes = []
    for i, node in enumerate(orig_nodes_numbers):
        orig_nodes.append(graph[node])
    
    # Get cost
    total_cost = dijkstra_search_multiple(graph, orig_nodes, dest_nodes)
    print('--------------------------------------')
    #print(individual)
    print(f'Cost for this individual: {total_cost}')
    return total_cost

ind1 = [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1]

group_flip = [251,818,627,951,1342]

for group in group_flip:
    if ind1[group] == 0:
        ind1[group] = 1
    else:
        ind1[group] = 0

print(evalOneMax(ind1))
if len(list(connected)) == 1:
    print('connected!')
    
doorways = [29006482,29006426,98693581,60214747,61832943,123746798,335886722,1086176387,293186405,61836666,123752235,61836724,199645,199657,86002348,98806881,199676,2309659180,199579,199631,25280879,252278546,349088725,1200092857,344594624,61846438,199633,78185943,1353014351,1523533148,294134554,2293870432,303569846,78185101,199578,199555,78206150,93025635,199709,25280894,199711,378034,251064643,199629,378033,199630,1972053,378036,33236715,33236714,33236713,33236712,3247534287,13870920,33236698,199670,16053361,199714,33236691,394514,199674,199554,2003243064,1438440,835947132,1986058,377970,9697671,378478,6266012505,378982,33469810,9697669,400877,33472670,17314952,378476,14078721,378547,4032457024,4032457021,1174052565,33245899,1521667613,393530,24966921,25267588,17314597,26405242,17314578,1468355127,33469876,105820957,17314580,248525008,32452325,68227270,68227268,33199276,342051037,106013175,354936108,105997268,68175583,213287619,60631931,33471568,34166935,34166934,60631873,64976837,60957676,60631904,199556,60957673,60957701,66840257,272454513,164424667,289862055,34978472,33470206,60424767,1835762311,378973,199664,25280691,64980132,33344236,61922011,2600458442,61923120,60632128,61922604,199557,378965,25280695,600206222,259679451,60733473,99109994,199719,60730742,1843138875,2459063161,199663,24950468,69686609,24950515,1170707214]

entries = []
exits = []

for door in doorways:
    node = graph[door]
    if len(node.children) > 1:
        # It has more than one child, so it must be going inwards, so it's an entry
        entries.append(door)
    else:
        # It probably only has one child, so it has stuff going in it, so it's an exit
        exits.append(door)


# if __name__ == "__main__":
#     pop = toolbox.population(n=6)
#     hof = tools.HallOfFame(1)
#     stats = tools.Statistics(lambda ind: ind.fitness.values)
#     stats.register("avg", np.mean)
#     stats.register("std", np.std)
#     stats.register("min", np.min)
#     stats.register("max", np.max)

#     algorithms.eaSimple(pop, toolbox, cxpb=0.5, mutpb=0.2, ngen=1000, 
#                         stats=stats, halloffame=hof)
#     # Shutdown at the end
#     ray.shutdown()